{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nvar BarChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(BarChart, _React$Component);\n\n  var _super = _createSuper(BarChart);\n\n  function BarChart() {\n    _classCallCheck(this, BarChart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BarChart, [{\n    key: \"render\",\n    value: function render() {\n      // console.log(this.props.data);\n      var parseData = function parseData(data) {\n        return {\n          labels: ['Temperature', 'Pressure', 'Humidity', 'Light', 'Noise', 'Gas'],\n          datasets: [{\n            label: 'Bar Chart',\n            backgroundColor: ['rgba(255,99,132,0,2)'],\n            borderColor: ['rgba(255,99,132,0,2)'],\n            borderWidth: 5,\n            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n            hoverBorderColor: 'rgba(255,99,132,1)',\n            data: data\n          }]\n        };\n      };\n\n      var options = {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        },\n        maintainAspectRatio: false\n      };\n      return __jsx(Bar, {\n        data: parseData(this.props.data),\n        option: options\n      });\n    }\n  }]);\n\n  return BarChart;\n}(React.Component);\n\nexport { BarChart as default };","map":null,"metadata":{},"sourceType":"module"}