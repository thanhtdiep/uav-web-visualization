{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nvar LineChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(LineChart, _React$Component);\n\n  var _super = _createSuper(LineChart);\n\n  function LineChart() {\n    _classCallCheck(this, LineChart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LineChart, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.data);\n      console.log(this.props.time);\n\n      var parseData = function parseData(data, time) {\n        return {\n          lables: [time],\n          datasets: [{\n            label: \"Temperature Overtime\",\n            fill: false,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n            hoverBorderColor: 'rgba(255,99,132,1)',\n            data: data\n          }]\n        };\n      };\n\n      var options = {};\n      return __jsx(Line, {\n        data: parseData(this.props.data, this.props.time),\n        option: options\n      });\n    }\n  }]);\n\n  return LineChart;\n}(React.Component);\n\nexport { LineChart as default };","map":{"version":3,"sources":["C:/Users/n9607234/Desktop/2020sem2/EGH455/Web Interface/components/Line.js"],"names":["React","Line","LineChart","console","log","props","data","time","parseData","lables","datasets","label","fill","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","options","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;;IAEqBC,S;;;;;;;;;;;;;6BACR;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,IAAvB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWE,IAAvB;;AAEA,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,IAAD,EAAOC,IAAP;AAAA,eAAiB;AAC/BE,UAAAA,MAAM,EAAE,CAACF,IAAD,CADuB;AAE/BG,UAAAA,QAAQ,EAAE,CAAC;AACPC,YAAAA,KAAK,EAAE,sBADA;AAEPC,YAAAA,IAAI,EAAE,KAFC;AAGPC,YAAAA,eAAe,EAAE,sBAHV;AAIPC,YAAAA,WAAW,EAAE,oBAJN;AAKPC,YAAAA,oBAAoB,EAAE,sBALf;AAMPC,YAAAA,gBAAgB,EAAE,oBANX;AAOPV,YAAAA,IAAI,EAAJA;AAPO,WAAD;AAFqB,SAAjB;AAAA,OAAlB;;AAaA,UAAMW,OAAO,GAAG,EAAhB;AAEA,aACI,MAAC,IAAD;AACI,QAAA,IAAI,EAAET,SAAS,CAAC,KAAKH,KAAL,CAAWC,IAAZ,EAAkB,KAAKD,KAAL,CAAWE,IAA7B,CADnB;AAEI,QAAA,MAAM,EAAEU;AAFZ,QADJ;AAMH;;;;EA1BkCjB,KAAK,CAACkB,S;;SAAxBhB,S","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nexport default class LineChart extends React.Component {\r\n    render() {\r\n        console.log(this.props.data);\r\n        console.log(this.props.time);\r\n\r\n        const parseData = (data, time) => ({\r\n            lables: [time],\r\n            datasets: [{\r\n                label: \"Temperature Overtime\",\r\n                fill: false,\r\n                backgroundColor: \"rgba(75,192,192,0.4)\",\r\n                borderColor: \"rgba(75,192,192,1)\",\r\n                hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                hoverBorderColor: 'rgba(255,99,132,1)',\r\n                data\r\n            }]\r\n        })\r\n\r\n        const options = {}\r\n\r\n        return (\r\n            <Line\r\n                data={parseData(this.props.data, this.props.time)}\r\n                option={options}\r\n            />\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}