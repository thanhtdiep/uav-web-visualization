{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nvar BarChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(BarChart, _React$Component);\n\n  var _super = _createSuper(BarChart);\n\n  function BarChart() {\n    _classCallCheck(this, BarChart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BarChart, [{\n    key: \"render\",\n    value: function render() {\n      // console.log(this.props.data);\n      var parseData = function parseData(data) {\n        return {\n          labels: ['Temperature', 'Pressure', 'Humidity', 'Light', 'Noise', 'Gas'],\n          datasets: [{\n            label: 'Bar Chart',\n            backgroundColor: ['rgba(255,99,132,0,2)'],\n            borderColor: ['rgba(255,99,132,0,2)'],\n            borderWidth: 5,\n            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n            hoverBorderColor: 'rgba(255,99,132,1)',\n            data: data\n          }]\n        };\n      };\n\n      var options = {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        },\n        maintainAspectRatio: false\n      };\n      return __jsx(Bar, {\n        data: parseData(this.props.data),\n        option: options\n      });\n    }\n  }]);\n\n  return BarChart;\n}(React.Component);\n\nexport { BarChart as default };","map":{"version":3,"sources":["C:/Users/n9607234/Desktop/2020sem2/EGH455/Web Interface/components/Bar.js"],"names":["React","Bar","BarChart","parseData","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","options","scales","yAxes","ticks","beginAtZero","maintainAspectRatio","props","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,iBAApB;;IAEqBC,Q;;;;;;;;;;;;;6BACR;AACL;AACA,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI;AAAA,eAAK;AACvBC,UAAAA,MAAM,EAAE,CAAC,aAAD,EAAgB,UAAhB,EAA4B,UAA5B,EAAwC,OAAxC,EAAiD,OAAjD,EAA0D,KAA1D,CADe;AAEvBC,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,KAAK,EAAE,WADX;AAEIC,YAAAA,eAAe,EAAE,CACb,sBADa,CAFrB;AAKIC,YAAAA,WAAW,EAAE,CACT,sBADS,CALjB;AAQIC,YAAAA,WAAW,EAAE,CARjB;AASIC,YAAAA,oBAAoB,EAAE,sBAT1B;AAUIC,YAAAA,gBAAgB,EAAE,oBAVtB;AAWIR,YAAAA,IAAI,EAAJA;AAXJ,WADM;AAFa,SAAL;AAAA,OAAtB;;AAmBA,UAAMS,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,KAAK,EAAE;AACHC,cAAAA,WAAW,EAAE;AADV;AADH,WAAD;AADH,SADI;AAQZC,QAAAA,mBAAmB,EAAE;AART,OAAhB;AAWA,aACI,MAAC,GAAD;AACI,QAAA,IAAI,EAAEf,SAAS,CAAC,KAAKgB,KAAL,CAAWf,IAAZ,CADnB;AAEI,QAAA,MAAM,EAAES;AAFZ,QADJ;AAMH;;;;EAvCiCb,KAAK,CAACoB,S;;SAAvBlB,Q","sourcesContent":["import React from 'react';\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport default class BarChart extends React.Component {\r\n    render() {\r\n        // console.log(this.props.data);\r\n        const parseData = data => ({\r\n            labels: ['Temperature', 'Pressure', 'Humidity', 'Light', 'Noise', 'Gas'],\r\n            datasets: [\r\n                {\r\n                    label: 'Bar Chart',\r\n                    backgroundColor: [\r\n                        'rgba(255,99,132,0,2)',\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255,99,132,0,2)',\r\n                    ],\r\n                    borderWidth: 5,\r\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                    hoverBorderColor: 'rgba(255,99,132,1)',\r\n                    data\r\n                }\r\n            ]\r\n        })\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }\r\n                }]\r\n            },\r\n            maintainAspectRatio: false\r\n        }\r\n        \r\n        return (\r\n            <Bar\r\n                data={parseData(this.props.data)}\r\n                option={options}\r\n            />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}